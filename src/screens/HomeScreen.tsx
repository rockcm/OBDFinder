import React, { useState } from 'react';
import { 
  View, 
  Text, 
  TextInput, 
  TouchableOpacity, 
  StyleSheet, 
  KeyboardAvoidingView, 
  Platform,
  ScrollView,
  Animated,
  Dimensions
} from 'react-native';
import { StackNavigationProp } from '@react-navigation/stack';
import { RootStackParamList } from '../types';
import AnimeOBDLogo from '../components/AnimeOBDLogo';
import { StatusBar } from 'expo-status-bar';
import { LinearGradient } from 'expo-linear-gradient';
import { theme } from '../styles/theme';

type HomeScreenProps = {
  navigation: StackNavigationProp<RootStackParamList, 'Home'>;
};

const { width } = Dimensions.get('window');

const HomeScreen: React.FC<HomeScreenProps> = ({ navigation }) => {
  const [obdCode, setObdCode] = useState('');
  const [isFocused, setIsFocused] = useState(false);
  const fadeAnim = React.useRef(new Animated.Value(0)).current;
  
  React.useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 1000,
      useNativeDriver: true,
    }).start();
  }, []);

  const handleSearch = () => {
    if (obdCode.trim()) {
      navigation.navigate('SearchResults', { obdCode: obdCode.trim() });
    }
  };

  return (
    <LinearGradient
      colors={theme.gradients.secondary}
      style={styles.gradientContainer}
    >
      <StatusBar style="light" />
      <KeyboardAvoidingView 
        style={styles.container}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <ScrollView 
          contentContainerStyle={styles.scrollContainer}
          showsVerticalScrollIndicator={false}
        >
          <Animated.View 
            style={[
              styles.header, 
              { 
                opacity: fadeAnim,
                transform: [{ translateY: fadeAnim.interpolate({
                  inputRange: [0, 1],
                  outputRange: [50, 0]
                })}] 
              }
            ]}
          >
            <AnimeOBDLogo width={200} height={200} style={styles.logoContainer} />
            <Text style={styles.title}>OBD Code Search</Text>
            <Text style={styles.subtitle}>Find video solutions for your vehicle</Text>
          </Animated.View>
          
          <Animated.View style={{ 
            opacity: fadeAnim, 
            transform: [{ translateY: fadeAnim.interpolate({
              inputRange: [0, 1],
              outputRange: [100, 0]
            })}]
          }}>
            <View style={styles.card}>
              <Text style={styles.label}>Enter OBD Code:</Text>
              <View style={[
                styles.inputContainer, 
                isFocused && styles.inputContainerFocused
              ]}>
                <TextInput
                  style={styles.input}
                  value={obdCode}
                  onChangeText={setObdCode}
                  placeholder="e.g. P0300"
                  placeholderTextColor={theme.text.muted}
                  autoCapitalize="characters"
                  maxLength={5}
                  onFocus={() => setIsFocused(true)}
                  onBlur={() => setIsFocused(false)}
                />
              </View>
              
              <TouchableOpacity 
                style={[styles.button, !obdCode.trim() && styles.buttonDisabled]}
                onPress={handleSearch}
                disabled={!obdCode.trim()}
                activeOpacity={0.8}
              >
                <Text style={styles.buttonText}>Search YouTube</Text>
              </TouchableOpacity>
            </View>
            
            <View style={styles.infoCard}>
              <View style={styles.infoHeader}>
                <Text style={styles.infoTitle}>What are OBD Codes?</Text>
              </View>
              <Text style={styles.infoText}>
                OBD (On-Board Diagnostic) codes are generated by your vehicle's computer to
                indicate problems with your car.
              </Text>
              <View style={styles.codeTypesContainer}>
                <View style={styles.codeType}>
                  <Text style={[styles.codeTypeLabel, styles.typePowertrain]}>P</Text>
                  <Text style={styles.codeTypeDescription}>Powertrain</Text>
                </View>
                <View style={styles.codeType}>
                  <Text style={[styles.codeTypeLabel, styles.typeBody]}>B</Text>
                  <Text style={styles.codeTypeDescription}>Body</Text>
                </View>
                <View style={styles.codeType}>
                  <Text style={[styles.codeTypeLabel, styles.typeChassis]}>C</Text>
                  <Text style={styles.codeTypeDescription}>Chassis</Text>
                </View>
                <View style={styles.codeType}>
                  <Text style={[styles.codeTypeLabel, styles.typeNetwork]}>U</Text>
                  <Text style={styles.codeTypeDescription}>Network</Text>
                </View>
              </View>
            </View>
          </Animated.View>
        </ScrollView>
      </KeyboardAvoidingView>
    </LinearGradient>
  );
};

const styles = StyleSheet.create({
  gradientContainer: {
    flex: 1,
  },
  container: {
    flex: 1,
  },
  scrollContainer: {
    flexGrow: 1,
    paddingHorizontal: 20,
    paddingTop: 60,
    paddingBottom: 30,
  },
  header: {
    alignItems: 'center',
    marginBottom: 30,
  },
  logoContainer: {
    borderRadius: 20,
    overflow: 'hidden',
    marginBottom: 10,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: theme.text.light,
    marginTop: 16,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: theme.text.subtitle,
    marginTop: 8,
    textAlign: 'center',
  },
  card: {
    backgroundColor: theme.background.card,
    borderRadius: theme.borderRadius.large,
    padding: 24,
    ...theme.shadows.medium,
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 12,
    color: theme.text.dark,
  },
  inputContainer: {
    borderWidth: 2,
    borderColor: theme.background.input,
    borderRadius: theme.borderRadius.medium,
    backgroundColor: theme.background.input,
    height: 56,
    marginBottom: 24,
    justifyContent: 'center',
    overflow: 'hidden',
  },
  inputContainerFocused: {
    borderColor: theme.primary.main,
    backgroundColor: theme.background.card,
    shadowColor: theme.primary.main,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  input: {
    fontSize: 18,
    paddingHorizontal: 16,
    paddingVertical: 12,
    color: theme.text.dark,
    fontWeight: '500',
    letterSpacing: 1,
  },
  button: {
    backgroundColor: theme.primary.main,
    borderRadius: theme.borderRadius.medium,
    height: 56,
    justifyContent: 'center',
    alignItems: 'center',
    ...theme.shadows.small,
  },
  buttonDisabled: {
    backgroundColor: theme.text.muted,
    shadowOpacity: 0,
    elevation: 0,
  },
  buttonText: {
    color: theme.text.light,
    fontSize: 18,
    fontWeight: '600',
    letterSpacing: 0.5,
  },
  infoCard: {
    backgroundColor: theme.background.card,
    borderRadius: theme.borderRadius.large,
    overflow: 'hidden',
    ...theme.shadows.medium,
  },
  infoHeader: {
    backgroundColor: theme.accent.light,
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: theme.accent.main,
  },
  infoTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: theme.secondary.dark,
  },
  infoText: {
    fontSize: 15,
    lineHeight: 22,
    color: theme.text.dark,
    padding: 16,
    paddingBottom: 8,
  },
  codeTypesContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    flexWrap: 'wrap',
    padding: 8,
    paddingBottom: 16,
  },
  codeType: {
    alignItems: 'center',
    width: (width - 80) / 4,
    marginVertical: 8,
  },
  codeTypeLabel: {
    width: 36,
    height: 36,
    borderRadius: 18,
    color: theme.text.light,
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
    textAlignVertical: 'center',
    lineHeight: 36,
    marginBottom: 6,
  },
  typePowertrain: {
    backgroundColor: theme.primary.main,
  },
  typeBody: {
    backgroundColor: theme.accent.main,
  },
  typeChassis: {
    backgroundColor: theme.secondary.main,
  },
  typeNetwork: {
    backgroundColor: theme.status.warning,
  },
  codeTypeDescription: {
    fontSize: 12,
    color: theme.text.muted,
  }
});

export default HomeScreen; 